name: build
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  build-service:
    name: Build Service
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        java_version: [ '17' ]
    steps:
      # Check out the project
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Setup the version of Java
      - name: Set up JDK ${{ matrix.java_version }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java_version }}
          distribution: 'adopt'
          check-latest: true

      # Cache all the things
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        if: ${{ env.SERVICE_SONAR_TOKEN != null && env.SERVICE_SONAR_TOKEN != '' }}
        env:
          SONAR_TOKEN: ${{ secrets.SERVICE_SONAR_TOKEN }}
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Compile the project
      - name: Compile service
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: mvn -B -V compile
        working-directory: ./service

      # Run the tests
      - name: Run service tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: mvn -B -V verify
        working-directory: ./service

      # Run Sonar Analysis
      - name: Analyze with SonarCloud on service
        if: ${{ env.SERVICE_SONAR_TOKEN != null && env.SERVICE_SONAR_TOKEN != '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SERVICE_SONAR_TOKEN }}
        run: mvn -B -V -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml org.jacoco:jacoco-maven-plugin:prepare-agent verify org.jacoco:jacoco-maven-plugin:report org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
        working-directory: ./service
  build-ui:
    name: Build UI
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      # Check out the project
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Setup Node/JS
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'

      # Cache all the things
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        if: ${{ env.UI_SONAR_TOKEN != null && env.UI_SONAR_TOKEN != '' }}
        env:
          SONAR_TOKEN: ${{ secrets.UI_SONAR_TOKEN }}
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Node packages
        uses: actions/cache@v3
        with:
          path: ./ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: ${{ runner.os }}-node

      # Install dependencies
      - name: Install Dependencies
        run: yarn install
        working-directory: ./ui

      # Compile the project
      - name: Build ui
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: yarn build
        working-directory: ./ui

      # Run the tests
      - name: Run ui tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        run: yarn test
        working-directory: ./ui

      # Run Sonar Analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.UI_SONAR_TOKEN }}
        with:
          projectBaseDir: ui
